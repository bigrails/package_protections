# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubocop-modularization` gem.
# Please instead update this file by running `bin/tapioca gem rubocop-modularization`.

module RuboCop; end
module RuboCop::Cop; end
module RuboCop::Cop::Modularization; end

class RuboCop::Cop::Modularization::NamespacedUnderPackageName < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp

  sig { void }
  def on_new_investigation; end

  class << self
    sig { returns(RuboCop::Cop::Modularization::NamespacedUnderPackageName::DesiredZeitwerkApi) }
    def desired_zeitwerk_api; end
  end
end

class RuboCop::Cop::Modularization::NamespacedUnderPackageName::DesiredZeitwerkApi
  sig { params(relative_filename: String, package_for_path: ParsePackwerk::Package).returns(T.nilable(RuboCop::Cop::Modularization::NamespacedUnderPackageName::DesiredZeitwerkApi::NamespaceContext)) }
  def for_file(relative_filename, package_for_path); end

  sig { params(pack: ParsePackwerk::Package).returns(String) }
  def get_pack_based_namespace(pack); end

  private

  sig { params(remaining_file_path: String, package_name: String).returns(String) }
  def get_actual_namespace(remaining_file_path, package_name); end

  sig { params(pack: ParsePackwerk::Package).returns(String) }
  def get_package_last_name(pack); end

  sig { returns(Pathname) }
  def root_pathname; end
end

class RuboCop::Cop::Modularization::NamespacedUnderPackageName::DesiredZeitwerkApi::NamespaceContext < ::T::Struct
  const :current_namespace, String
  const :expected_filepath, String
  const :expected_namespace, String

  class << self
    def inherited(s); end
  end
end

class RuboCop::Cop::Modularization::TypedPublicApi < ::RuboCop::Cop::Sorbet::StrictSigil; end

module RuboCop::Modularization
  class << self
    sig { void }
    def bust_cache!; end

    sig { returns(RuboCop::Modularization::Private::Configuration) }
    def config; end

    sig { params(blk: T.proc.params(arg0: RuboCop::Modularization::Private::Configuration).void).void }
    def configure(&blk); end
  end
end

RuboCop::Modularization::CONFIG_DEFAULT = T.let(T.unsafe(nil), Pathname)
class RuboCop::Modularization::Error < ::StandardError; end

module RuboCop::Modularization::Inject
  class << self
    def defaults!; end
  end
end

RuboCop::Modularization::PROJECT_ROOT = T.let(T.unsafe(nil), Pathname)

module RuboCop::Modularization::Private
  class << self
    sig { void }
    def bust_cache!; end

    sig { void }
    def load_client_configuration; end
  end
end

class RuboCop::Modularization::Private::Configuration
  sig { void }
  def initialize; end

  sig { void }
  def bust_cache!; end

  sig { returns(T::Array[String]) }
  def globally_permitted_namespaces; end

  sig { params(globally_permitted_namespaces: T::Array[String]).void }
  def globally_permitted_namespaces=(globally_permitted_namespaces); end
end
